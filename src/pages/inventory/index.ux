<import name="topbar" src="@components/topbar/topbar.ux" />
<import name="buffItem" src="@components/buffItem/buffItem.ux" />
<template>
  <div class="page">
    
    <scroll class="list" scroll-y="true">
      <text class="price">{{ price }}</text>
      <block for="{{items}}">
        <buffItem itemdata="{{$item.item}}" goodsdata="{{$item.goods_info}}" style="margin-bottom: 10px" />
      </block>
    </scroll>
    <div class="pagination">
      <input type="button" class="btn" disabled="{{page <= 1}}" value="上一页" onclick="prevPage" />
      <text class="page-info">{{ page }} / {{ totalPages }}</text>
      <input type="button" class="btn" disabled="{{page >= totalPages}}" value="下一页" onclick="nextPage" />
    </div>
    <topbar title="我的库存" />
  </div>
</template>

<script>
import {parseData} from "@utils/buffData"
import prompt from "@system.prompt"
import router from "@system.router"
import { CacheService } from "@utils/cacheservice"
import {cacheText, getCacheText} from "@utils/textCache"

export default {
  protected: {page: 1},
  private: {items: [], price: "", totalPages: 1},
  async onInit() {
    this.page = Number(this.page) || 1
    this.totalPages = await CacheService.getTotalPages()
    await this.loadPage()
  },
  async loadPage() {
    prompt.showToast({message: "加载中..."})
    try {
      const data = await globalThis.buff.getUserInventory(this.page)
      if(globalThis.settingsManager.get("saveInv"))await CacheService.cachePage(data, this.page)
      this.totalPages = data.total_page
      if (data.brief_info != null) this.price = data.brief_info
      if(globalThis.settingsManager.get("saveInv"))cacheText(this.price,"price")
      this.items = parseData({
        items: data.items,
        goods_infos: await CacheService.getAllGoods(),
        fop_str: ""
      })
    } catch (err) {
      prompt.showToast({ message: "加载失败,使用缓存数据" })
      this.items = await CacheService.getPage(this.page)
      this.price = await getCacheText("price")
    }
  },
  prevPage() {
    if (this.page > 1) router.replace({uri: "/pages/inventory", params: {page: (+this.page) - 1}})
  },
  nextPage() {
    if (this.page < this.totalPages)
      router.replace({uri: "/pages/inventory", params: {page: (+this.page) + 1}})
  }
}
</script>

<style>
.page {
  position: absolute;
  top: 0;
  left: 0;
  width: 336px;
  height: 480px;
  background-color: black;
  flex-direction: column;
}
.list {
  flex: 1;
  flex-direction: column;
  padding: 6px;
  padding-top: 60px;
  padding-bottom: 60px;
  align-items: center;
}
.price {
  font-size: 20px;
  color: #ffffff;
  margin-bottom: 10px;
}
.pagination {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 60px;
  background-color: rgba(0, 0, 0, 0.8);
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  padding: 0 20px;
}
.btn {
  width: 80px;
  height: 36px;
  border-radius: 18px;
  background-color: #09ba07;
  color: #ffffff;
  font-size: 16px;
  text-align: center;
}
.page-info {
  font-size: 18px;
  color: #ffffff;
}
</style>