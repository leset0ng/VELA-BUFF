<import name="topbar" src="@components/topbar/topbar.ux"></import>
<import name="buffItem" src="@components/buffItem/buffItem.ux"></import>
<template>
    <div class="page">
        <scroll scroll-y="true" class="content" onScroll="scroll">
            <div class="placeholder" style="height:{{placeholder}}px"></div>
            <text onclick="update">{{price}}</text>
            <block for="{{items}}">
                <buffItem itemdata="{{$item.item}}" goodsdata="{{$item.goods_info}}" if="{{$item.show}}"
                    style="margin-top: 10px;position:absolute;top:{{$item.displayX}}px"></buffItem>
            </block>
        </scroll>
        <topbar title="我的库存"></topbar>
    </div>
</template>

<script>
import {parseData} from "@utils/buffData"
import prompt from "@system.prompt"
import router from "@system.router"
import { BuffDataCache } from "@src/buff/buffCache"
import {cacheText,getCacheText} from "@utils/textCache"

let lazyTimeout = null
export default {
  private: {
    items: [],
    placeholder: 0,
    price:""
  },
  async onInit() {
    try {
      await globalThis.buff.ready
      if (!globalThis.buff.loginStatus) {
        prompt.showToast("未登录！")
        router.back()
        return
      }
      await globalThis.settingsManager.ready
    } catch (error) {
      
    }
    global.runGC()
    this.update()
  },
    async update() {
    prompt.showToast({message: "正在获取数据"})
      try {
        let datas
        try {
          datas = await globalThis.buff.getUserInventory()
          this.price = datas.brief_info
          
          /* if (globalThis.settingsManager.get("saveInv") && new Date(await getCacheText("lastUpdateTime")).getTime() < Date.now() - 1000 * 60 * 60 * 24) {
            prompt.showToast({ message: "正在缓存数据,可能导致卡顿" })
            cacheText(this.price, "inventoryPrice")
            cacheText(Date.now(), "lastUpdateTime")
            BuffDataCache.save(datas)
          } */
        } catch (e) {
          console.log(e)
          datas = await BuffDataCache.load()
          this.price = await getCacheText("inventoryPrice")
        }
        this.items = parseData(datas)
        this.items.forEach((item, index) => {
          item.displayX=index*273+100
        })
        this.placeholder = this.items.length * 273
        this.items[0].show = true
        this.items[1].show = true
      } catch (error) {
      console.log(error)
        prompt.showToast({message:error.message})
    }
  },
  scroll({scrollY}) {
    //懒加载
    clearTimeout(lazyTimeout)
    lazyTimeout = setTimeout(() => {
      this.items.forEach((item, index) => {
        if (scrollY + 500 > item.displayX && scrollY-300 <item.displayX) {
          item.show = true
        } else {
          item.show = false
        }
      })
    }, 100)
  }
}
</script>

<style>
text {
  font-size: 20px;
}
.page {
  position: absolute;
  background-color: black;
  width: 336px;
  height: 480px;
  align-items: center;
}
.content {
  padding-top: 60px;
  width: 100%;
  height: 100%;
  flex-direction: column;
  align-items: center;
}
.menu {
  position: absolute;
  background-color: black;
  width: 100%;
  height: 100%;
  padding: 10px;
  padding-top: 60px;
  align-items: center;
  transform: translateY(-100%);
}
.placeholder {
  width: 1px;
  position: absolute;
  top: 60px;
}
.menu-item {
  position: relative;
  height: 80px;
  width: 100%;
  background-color: #262626;
  margin-top: 10px;
  padding: 10px;
  border-radius: 24px;
  justify-content: space-between;
  align-items: center;
}
</style>