<import name="topbar" src="@components/topbar/topbar.ux"></import>
<import name="buffItem" src="@components/buffItem/buffItem.ux"></import>
<template>
    <div class="page">
        <scroll scroll-y="true" class="content" onScroll="onScroll" if="{{show}}">
            <text onclick="update">推荐</text>
            <!-- 渲染占位符和可见的 buffItem -->
            <block for="{{items}}">
                <div if="{{$item.isPlaceholder}}" style="height: 263px; width: 324px; background-color: #262626; border-radius: 20px; margin-bottom: 10px;"></div>
                <buffItem else itemdata="{{$item.item}}" goodsdata="{{$item.goods_info}}" style="margin-bottom: 10px" />
            </block>
        </scroll>
        <list show="{{menu_show}}" class="menu" id="menu">
            <list-item  static class="menu-item" type="menu" for.static="{{pages}}" onClick="route($item.route)">
                <img  static src="{{$item.img}}" class="menu-icon" />
                <text  static class="menu-text">{{ $item.name }}</text>
            </list-item>
        </list>
        <topbar title="{{title}}" onback="menu" menu="{{!menu_show}}" prevent-default="true"></topbar>
    </div>
</template>

<script>
import router from "@system.router"
import folme from "@system.folme"
import {parseData} from "@utils/buffData"
import prompt from "@system.prompt"

export default {
  private: {
    menu_show: false,
    title: "首页",
    pages: [
      {name: "用户详情", route: "pages/user", img: "/common/user.png"},
      {name: "库存", route: "pages/inventory", img: "/common/inventory.png"},
      {name: "设置", route: "pages/setting", img: "/common/settings.png"},
      {name: "关于", route: "pages/about", img: "/common/info.png"},
      {name: "搜索", route: "pages/search", img: "/common/search.png"}
    ],
    items: [],
    show: true,
    scrollTop: 0,
    visibleStart: 0,
    visibleEnd: 0,
    debounceTimer: null
  },
    async onInit() {
        await globalThis.buff.ready
       this.update()
       this.calculateVisibleItems()
  },
    async update() {
    prompt.showToast({message: "正在获取数据"})
    try {
        this.items = parseData(await globalThis.buff.getPopular())
        this.calculateVisibleItems()
    } catch (error) {
        prompt.showToast({message:error.message})
    }
  },
  menu() {
    folme.to({
      id: "menu",
      toState: {translateY: this.menu_show ? -480 : 0},
      config: {duration: 0.3}
    })
    setTimeout(
      () => {
        this.menu_show = !this.menu_show
        this.title = this.menu_show ? "菜单" : "首页"
      },
      this.menu_show ? 300 : 0
    )
  },
  route(route) {
    router.push({uri: route})
  },
  onBackPress() {
    if (this.menu_show) {
      this.menu()
      return true
    }
  },
  onScroll(e) {
    this.scrollTop = e.scrollY
    // 添加防抖逻辑
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer);
    }
    this.debounceTimer = setTimeout(() => {
      this.calculateVisibleItems();
    }, 300); // 300 毫秒的防抖时间，可以根据实际情况调整
  },
  calculateVisibleItems() {
    const itemHeight = 273; // 每个 buffItem 的高度，包含 margin-bottom
    const visibleStart = Math.floor(this.scrollTop / itemHeight);
    const visibleEnd = Math.ceil((this.scrollTop + 480) / itemHeight); // 假设页面高度为 480

    this.visibleStart = Math.max(0, visibleStart - 1);
    this.visibleEnd = Math.min(this.items.length, visibleEnd + 1);

    this.items.forEach((item, index) => {
      item.isPlaceholder = index < this.visibleStart || index >= this.visibleEnd;
    })
  },
  onHide() {
    //节省内存
    this.show=false
  },
  onShow() {
    this.scrollTop = 0
    this.calculateVisibleItems()
    this.show=true
  }
}
</script>

<style>
text {
  font-size: 40px;
}
.page {
  position: absolute;
  background-color: black;
  width: 336px;
  height: 480px;
  align-items: center;
}
.content {
  padding-top: 60px;
  width: 100%;
  height: 100%;
  flex-direction: column;
  align-items: center;
}
.menu {
  position: absolute;
  background-color: black;
  width: 100%;
  height: 100%;
  padding: 10px;
  padding-top: 60px;
  align-items: center;
  transform: translateY(-100%);
}
.placeholder {
  width: 1px;
  position: absolute;
  top: 60px;
}
.menu-item {
  position: relative;
  height: 80px;
  width: 100%;
  background-color: #262626;
  margin-top: 10px;
  padding: 10px;
  border-radius: 24px;
  justify-content: space-between;
  align-items: center;
}
</style>