<import name="topbar" src="@components/topbar/topbar.ux"></import>
<import name="buffItem" src="@components/buffItem/buffItem.ux"></import>
<template>
    <div class="page">
        <scroll scroll-y="true" class="content" onScroll="scroll">
            <div class="placeholder" style="height:{{placeholder}}px"></div>
            <text onclick="update">推荐</text>
            <block for="{{items}}">
                <buffItem itemdata="{{$item.item}}" goodsdata="{{$item.goods_info}}" if="{{$item.show}}"
                    style="margin-top: 10px"></buffItem>
            </block>
        </scroll>
        <list show="{{menu_show}}" class="menu" id="menu">
            <list-item class="menu-item" type="menu" for="{{pages}}" onClick="route($item.route)">
                <img src="{{$item.img}}" class="menu-icon" />
                <text class="menu-text">{{ $item.name }}</text>
            </list-item>
        </list>
        <topbar title="{{title}}" onback="menu" menu="{{!menu_show}}" prevent-default="true"></topbar>
    </div>
</template>

<script>
import router from "@system.router"
import folme from "@system.folme"
import {parseData} from "@utils/buffData"
import prompt from "@system.prompt"

let lazyTimeout = null
export default {
  private: {
    menu_show: false,
    title: "首页",
    pages: [
      {name: "用户详情", route: "pages/user", img: "/common/user.png"},
      {name: "库存", route: "pages/inventory", img: "/common/inventory.png"},
      {name: "设置", route: "pages/setting", img: "/common/settings.png"},
      {name: "关于", route: "pages/about", img: "/common/info.png"}
    ],
    items: [],
    placeholder: 0
  },
    async onInit() {
        await globalThis.buff.ready
       this.update()
  },
    async update() {
    prompt.showToast({message: "正在获取数据"})
    try {
        this.items = parseData(await globalThis.buff.getPopular())
        this.placeholder = this.items.length * 300
        this.items[0].show = true
        this.items[1].show = true
    } catch (error) {
        prompt.showToast({message:error.message+error.stack.slice(0,200),duration:5000})
    }
  },
  menu() {
    folme.to({
      id: "menu",
      toState: {translateY: this.menu_show ? -480 : 0},
      config: {duration: 0.3}
    })
    setTimeout(
      () => {
        this.menu_show = !this.menu_show
        this.title = this.menu_show ? "菜单" : "首页"
      },
      this.menu_show ? 300 : 0
    )
  },
  route(route) {
    router.push({uri: route})
  },
  onBackPress() {
    if (this.menu_show) {
      this.menu()
      return true
    }
  },
  scroll({scrollY}) {
    //懒加载
    clearTimeout(lazyTimeout)
    lazyTimeout = setTimeout(() => {
      this.items.forEach((item, index) => {
        if (scrollY + 480 > index * 300) {
          item.show = true
        } else {
          item.show = false
        }
      })
    }, 100)
  }
}
</script>

<style>
text {
  font-size: 40px;
}
.page {
  position: absolute;
  background-color: black;
  width: 336px;
  height: 480px;
  align-items: center;
}
.content {
  padding-top: 60px;
  width: 100%;
  height: 100%;
  flex-direction: column;
  align-items: center;
}
.menu {
  position: absolute;
  background-color: black;
  width: 100%;
  height: 100%;
  padding: 10px;
  padding-top: 60px;
  align-items: center;
  transform: translateY(-100%);
}
.placeholder {
  width: 1px;
  position: absolute;
  top: 60px;
}
.menu-item {
  position: relative;
  height: 80px;
  width: 100%;
  background-color: #262626;
  margin-top: 10px;
  padding: 10px;
  border-radius: 24px;
  justify-content: space-between;
  align-items: center;
}
</style>