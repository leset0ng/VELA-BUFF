<template>
    <div style="{{wapperstyle}}" class="imageWrapper">
        <image class="img" src="{{src}}" onclick="viewBig" if="{{!loading}}" style="{{imgstyle}}"/>
        <image src="{{loading_src.value}}" class="loading" else/>
    </div>
</template>

<script>
import { getImage } from "@utils/imgCache"
import router from "@system.router"
/* import media from "@system.media" 手环无法双指放大，*/

let ani, loading = true
let startAni, stopAni
export default {
    props: ["url","wapperstyle", "imgstyle", "prevent-default" , "objectfit"],
    data: {
        src: "",
        get loading() { return loading },
        set loading(value) { loading = value; if (value) startAni(); else stopAni() },
        loading_src: {value:"/common/animations/loading/icons8-loading-28.png"},
    }, startAni() {
        const prefix = "/common/animations/loading/icons8-loading-"
        const suffix = ".png"
        const images = []
        for (let i = 1; i <= 28; i++) { images.push(prefix + i + suffix) }
        let index = 0
        clearInterval(ani)
        ani=setInterval(() => {
            try {
                this.loading_src.value = images[index++]
                if (index >= images.length) index = 0
            } catch (error) {
                clearInterval(ani)
            }
        },33);
    }, stopAni() {
        clearInterval(ani)
    },
    onInit() {
        startAni = this.startAni.bind(this)
        stopAni = this.stopAni.bind(this)
        /* this.startAni() */
        if(this.url)this.setUrl()
        this.$watch("url", "setUrl")
    },
    viewBig() {
        if (this.preventDefault) return
            /* media.previewImage({ current:this.src }) */
        console.log("viewBig", this.src)
        router.push({ uri: "pages/bigImg", params: { uri: this.src } })
    },async setUrl() {
        try {
            if (!this.url) return;
            if (this.url.startsWith("http")) {
                this.loading = true
                console.log("setUrl", this.url)
                this.src = (await getImage(this.url))
                this.loading = false
            } else {
                this.src = this.url
                this.loading = false
            }
        } catch (error) {
            console.log("betterImage",error)
        }
    }
 }
</script>

<style>
.img{
    position: absolute;
    width: 100%;
}
.loading{
    width: 100%;
    height: 100%;
    object-fit: none;
    border-radius: 90px;
}
.imageWrapper{
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
</style>