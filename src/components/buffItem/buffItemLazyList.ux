<import name="buffItem" src="./buffItem.ux"></import>
<template>
    <scroll class="list" style="padding-top:{{topbarHeight}};" scroll-y="{{scrollable}}" onscroll="onScroll"
        onscrolltop="scrolltop" ontouchstart="touchstart" ontouchmove="touchmove" ontouchend="touchend">
        <!-- 渲染占位符和可见的 buffItem -->
        <block for="{{items}}">
            <div if="{{$item.isPlaceholder}}" style="
          height: 263px;
          width: 324px;
          background-color: #262626;
          border-radius: 20px;
          margin-bottom: 10px;
        "></div>
            <buffItem else itemdata="{{$item.item}}" goodsdata="{{$item.goods_info}}" style="margin-bottom: 10px">
            </buffItem>
        </block>
        <text class="refresh" style="top:{{refreshTop}}px;">{{refreshText}}</text>
    </scroll>
</template>

<script>
const {topbarHeight} = globalThis
export default {
  props: ["items","enablefresh"],
    data: {
    scrollable: true,
    scrollTop: 0,
    visibleStart: 0,
    visibleEnd: 0,
    debounceTimer: null,
    topbarHeight,
    scrollToppd: true,
    refreshText: "下拉刷新",
    refreshTop: -40,
  },
  onInit() {
    this.calculateVisibleItems()
  },
  onScroll(e) {
    this.scrollTop = e.scrollY
    if (e.scrollY > 0) this.scrollToppd = false
    // 添加防抖逻辑
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer)
    }
    this.debounceTimer = setTimeout(() => {
      this.calculateVisibleItems()
    }, 300) // 300 毫秒的防抖时间，可以根据实际情况调整
  },
    calculateVisibleItems() {
    const itemHeight = 273 // 每个 buffItem 的高度，包含 margin-bottom
    const visibleStart = Math.floor(this.scrollTop / itemHeight)
    const visibleEnd = Math.ceil((this.scrollTop + 480) / itemHeight) // 假设页面高度为 480

    this.visibleStart = Math.max(0, visibleStart - 1)
    this.visibleEnd = Math.min(this.items.length, visibleEnd + 1)

    this.items.forEach((item, index) => {
      item.isPlaceholder = index < this.visibleStart || index >= this.visibleEnd
    })
  },
  scrolltop() {
    this.scrollToppd = true
  },
  touchstart({changedTouches}) {
      if (!this.scrollToppd||!this.enablefresh) return
      this.startY = changedTouches[0].clientY
  },
    touchmove({ changedTouches }) {
        if (!this.scrollToppd||!this.enablefresh) return
        const currentY = changedTouches[0].clientY
        const deltaY = currentY - this.startY
        if (deltaY < 0) return
        this.scrollable = false
        // 定义一个阻力系数，随着下拉距离增加而增大，使下拉越来越难
        const resistanceFactor = 0.003;
        const adjustedDeltaY = deltaY / (1 + resistanceFactor * deltaY);
        this.refreshTop = Math.min(480, adjustedDeltaY-40);
        if (deltaY > 100) { // 松开手指后，判断是否超过阈值
            this.refreshText = "松开刷新"
        } else { // 未超过阈值，重置
            this.refreshText = "下拉刷新"
        }
  },touchend() {
        if (!this.scrollToppd || !this.enablefresh) return
        this.scrollable = true
        this.refreshTop = -40 // 重置刷新状态
        if (this.refreshText == "松开刷新") {
            this.$emit("fresh")

        }
  }
}
</script>

<style>
.list {
  position: absolute;
  flex: 1;
  flex-direction: column;
  padding: 6px;
  padding-bottom: 160px;
  width: 100%;
  height: 480px;
  align-items: center;
}
.refresh {
  position: absolute;
  text-align: center;
  background-color: rgba(0, 0, 0, 0.8);
  padding: 10px;
  border-radius: 99px;
}
</style>